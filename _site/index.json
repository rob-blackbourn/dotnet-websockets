{
  "README.html": {
    "href": "README.html",
    "title": "dotnet-websockets | websockets-sansio",
    "summary": "dotnet-websockets A sans-io implementation of WebSockets in .Net. Status I believe this is working. Please report any issues. The API The API is actually very simple, but the read/write semantics can be confusing. At the heart of a sans-io implementation is a processing engine; which is known here as the \"protocol\". When bytes are \"read\" from the network, they are \"written\" to the protocol. the protocol decodes the bytes to higher level objects like web requests and websocket messages. Some business logic is applied to these higher level objects, which produce other higher level objects (like web responses or new websocket messages). These objects are then written to the protocol which are encoded to bytes. Finally bytes are read from the protocol which are then written to the network. To Summarize there is a read flow and a write flow: The read flow Read bytes from network Write bytes to protocol Read objects from protocol The write flow Write objects to protocol Read bytes from protocol Write bytes to network. Web Handshake, Messages, and Closing A WebSocket goes through two protocol lifecycle stages. Connection Handshake Messages The connection handshake takes a web request and attempts to negotiate a websocket connection. This statement suggests a more complicated workflow than actually exists. What happens here is the client sends a standard \"GET\" web request with some headers that indicate a websocket is requested. If the server supports websockets an appropriate response is sent, and all subsequent communication uses the websocket protocol. Data Messages Once the protocol is established, data messages can be sent between the client and the server. These messages can be either text, or binary. Control Messages As well as data messages, there are some control messages that can be sent. Ping/Pong Close Ping/Pong If a client receives a ping it is expected to respond with a pong with the same data received. Close Either participant can simply close the connection, however the protocol specifies a close handshake. The handshake consists of one side sending a close message with an optional code and text reason, where the other side responds with a close containing the same data. The Implementation There are two main parts to the implementation: The protocols and the messages. The messages provide a way to represent the information exchanged between the clients and the servers. The protocols provide the mechanism by which these messages are passed. The Protocol The protocol base class provides the following methods: ReadHandshakeData WriteHandshakeData ReadMessageData WriteMessageData ReadMessage WriteMessage The ServerProtocol The server protocol provides the extra method: ProcessHandshakeRequest The ClientProtocol The client protocol provides the extra methods: SendHandshakeRequest ProcessHandshakeResponse Examples There is an example echo server written for both the client and the server. Development For documentation: docfx ./docfx.json --serve"
  },
  "api/WebSockets.Core.BinaryMessage.html": {
    "href": "api/WebSockets.Core.BinaryMessage.html",
    "title": "Class BinaryMessage | websockets-sansio",
    "summary": "Class BinaryMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll public class BinaryMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage BinaryMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryMessage(byte[]) public BinaryMessage(byte[] data) Parameters data byte[]"
  },
  "api/WebSockets.Core.ClientHandshake.html": {
    "href": "api/WebSockets.Core.ClientHandshake.html",
    "title": "Class ClientHandshake | websockets-sansio",
    "summary": "Class ClientHandshake Namespace WebSockets.Core Assembly WebSockets.Core.dll The client side of the WebSocket handshake. public class ClientHandshake : Handshake Inheritance object Handshake ClientHandshake Inherited Members Handshake.State Handshake.SelectedSubProtocol Handshake.ReadData(byte[], ref long, long) Handshake.WriteData(byte[], long, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples using System; using System.Net; using System.Net.Sockets; using WebSockets.Core; using WebSockets.Core.Messages; namespace ClientExample { class Program { static void main() { var endpoint = IPEndPoint.Parse(\"localhost:8081\"); var tcpClient = new TcpClient(); tcpClient.Connect(endpoint); stream = tcpClient.GetStream(); handshake = new ClientHandshake(\"http://client.com\", []); handshake.WriteRequest(\"/chat\", \"www.example.com\"); // Send the request. var buffer = new byte[1024]; var isDone = false; while (!isDone) { var bytesRead = 0L; handshake.ReadData(buffer, ref bytesRead, buffer.LongLength); if (bytesRead == 0) isDone = true; else stream.Write(buffer, 0, (int)bytesRead); } // Read the response. var offset = 0L; isDone = false; while (!isDone) { var bytesRead = stream.Read(buffer); handshake.WriteData(buffer, offset, bytesRead); if (offset == bytesRead) offset = 0; isDone = handshake.ReadResponse() is not null; } var webResponse = handshake.ReadResponse(); } } } Constructors ClientHandshake(string, string[]) Construct a client handshake. public ClientHandshake(string origin, string[] subProtocols) Parameters origin string The origin is the url of the initiator of the request. subProtocols string[] A (possibly empty) array of requested sub-protocols. Methods ReadResponse() Read a handshake response. public WebResponse? ReadResponse() Returns WebResponse The response from the server, or null if a complete response has yet to be received. WriteRequest(string, string) Write a handshake request. public void WriteRequest(string path, string host) Parameters path string The path on the server. host string The server name."
  },
  "api/WebSockets.Core.CloseMessage.html": {
    "href": "api/WebSockets.Core.CloseMessage.html",
    "title": "Class CloseMessage | websockets-sansio",
    "summary": "Class CloseMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll public class CloseMessage : Message, IEquatable<Message>, IEquatable<CloseMessage> Inheritance object Message CloseMessage Implements IEquatable<Message> IEquatable<CloseMessage> Inherited Members Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CloseMessage(ushort?, string?) public CloseMessage(ushort? code, string? reason) Parameters code ushort? reason string Properties Code public ushort? Code { get; } Property Value ushort? Reason public string? Reason { get; } Property Value string Methods Equals(CloseMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(CloseMessage? other) Parameters other CloseMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.DataMessage.html": {
    "href": "api/WebSockets.Core.DataMessage.html",
    "title": "Class DataMessage | websockets-sansio",
    "summary": "Class DataMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll public abstract class DataMessage : Message, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage Implements IEquatable<Message> IEquatable<DataMessage> Derived BinaryMessage PingMessage PongMessage Inherited Members Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataMessage(MessageType, byte[]) public DataMessage(MessageType type, byte[] data) Parameters type MessageType data byte[] Properties Data public byte[] Data { get; } Property Value byte[] Methods Equals(DataMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(DataMessage? other) Parameters other DataMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.DateTimeProvider.html": {
    "href": "api/WebSockets.Core.DateTimeProvider.html",
    "title": "Class DateTimeProvider | websockets-sansio",
    "summary": "Class DateTimeProvider Namespace WebSockets.Core Assembly WebSockets.Core.dll public class DateTimeProvider : IDateTimeProvider Inheritance object DateTimeProvider Implements IDateTimeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Now public DateTime Now { get; } Property Value DateTime"
  },
  "api/WebSockets.Core.Handshake.html": {
    "href": "api/WebSockets.Core.Handshake.html",
    "title": "Class Handshake | websockets-sansio",
    "summary": "Class Handshake Namespace WebSockets.Core Assembly WebSockets.Core.dll The base protocol class providing functionality shared by both clients and servers. public abstract class Handshake Inheritance object Handshake Derived ClientHandshake ServerHandshake Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SelectedSubProtocol The sub-protocol negotiated during the handshake. public string? SelectedSubProtocol { get; protected set; } Property Value string The (possibly null) selected sub-protocol. State The state of the connection. public HandshakeState State { get; protected set; } Property Value HandshakeState The connection state. Methods ReadData(byte[], ref long, long) Read handshake data from the provided array into the handshake buffer. public void ReadData(byte[] source, ref long offset, long length) Parameters source byte[] The buffer containing the data. offset long The offset into the buffer. length long The length of the data. WriteData(byte[], long, long) Write data from the handshake buffer into the provided array. public void WriteData(byte[] destination, long offset, long length) Parameters destination byte[] The array to receive the data. offset long The point in the buffer to start writing the data. length long The length of the buffer."
  },
  "api/WebSockets.Core.HandshakeState.html": {
    "href": "api/WebSockets.Core.HandshakeState.html",
    "title": "Enum HandshakeState | websockets-sansio",
    "summary": "Enum HandshakeState Namespace WebSockets.Core Assembly WebSockets.Core.dll The state of the handshake. public enum HandshakeState Fields Failed = 2 Pending = 0 Succeeded = 1"
  },
  "api/WebSockets.Core.IDateTimeProvider.html": {
    "href": "api/WebSockets.Core.IDateTimeProvider.html",
    "title": "Interface IDateTimeProvider | websockets-sansio",
    "summary": "Interface IDateTimeProvider Namespace WebSockets.Core Assembly WebSockets.Core.dll public interface IDateTimeProvider Properties Now DateTime Now { get; } Property Value DateTime"
  },
  "api/WebSockets.Core.INonceGenerator.html": {
    "href": "api/WebSockets.Core.INonceGenerator.html",
    "title": "Interface INonceGenerator | websockets-sansio",
    "summary": "Interface INonceGenerator Namespace WebSockets.Core Assembly WebSockets.Core.dll The interface for a nonce generator. public interface INonceGenerator Methods CreateClientKey() Creates a random key for use in a handshake. The key is a sixteen byte array of randomly generated bytes, converted to a base 64 encoded string. string CreateClientKey() Returns string The generated key. CreateMask() Create a mask for a websocket message. A mask is a four byte array containing random data. The mask is not intended to ensure security, but to prevent network infrastructure misinterpreting data. byte[] CreateMask() Returns byte[] The mask."
  },
  "api/WebSockets.Core.Message.html": {
    "href": "api/WebSockets.Core.Message.html",
    "title": "Class Message | websockets-sansio",
    "summary": "Class Message Namespace WebSockets.Core Assembly WebSockets.Core.dll A WebSocket message. public abstract class Message : IEquatable<Message> Inheritance object Message Implements IEquatable<Message> Derived CloseMessage DataMessage TextMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Message(MessageType) protected Message(MessageType type) Parameters type MessageType Properties Type The message type. public MessageType Type { get; } Property Value MessageType The type of the message. Methods Deserialize(byte[]) Deserialize data into a message. public static Message Deserialize(byte[] data) Parameters data byte[] The data to deserialize. Returns Message The deserialized message. Equals(Message?) Check for equality. public bool Equals(Message? other) Parameters other Message The other message. Returns bool True if the messages are the same. Serialize(bool, Reserved?, long, INonceGenerator?) Serialize the message to bytes. public byte[] Serialize(bool isClient, Reserved? reserved = null, long maxFrameSize = 9223372036854775807, INonceGenerator? nonceGenerator = null) Parameters isClient bool If true this is a client message, otherwise it is a server message. reserved Reserved? The reserved bits. maxFrameSize long The maximum size of a frame. nonceGenerator INonceGenerator A generator for client masks. Returns byte[] The message, serialized to bytes."
  },
  "api/WebSockets.Core.MessageProtocol.html": {
    "href": "api/WebSockets.Core.MessageProtocol.html",
    "title": "Class MessageProtocol | websockets-sansio",
    "summary": "Class MessageProtocol Namespace WebSockets.Core Assembly WebSockets.Core.dll The base protocol class providing functionality shared by both clients and servers. public class MessageProtocol Inheritance object MessageProtocol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageProtocol(bool) public MessageProtocol(bool isClient) Parameters isClient bool Properties State The state of the protocol. public ProtocolState State { get; protected set; } Property Value ProtocolState The protocol state. Methods ReadData(byte[], ref long, long) Read data from the protocol. public bool ReadData(byte[] destination, ref long offset, long length) Parameters destination byte[] The array to which the data should be written. offset long The offset in the array to start writing the data. length long The length of the array. Returns bool ReadMessage() Read a message from the protocol. public Message? ReadMessage() Returns Message If there is a complete message the message is returned, otherwise null. WriteData(byte[], long, long) Write data to the protocol. public void WriteData(byte[] source, long offset, long length) Parameters source byte[] The data to write. offset long The offset from which the data should be written. length long The available length of the data. WriteMessage(Message) Write a message to the protocol. public void WriteMessage(Message message) Parameters message Message The message to write."
  },
  "api/WebSockets.Core.MessageType.html": {
    "href": "api/WebSockets.Core.MessageType.html",
    "title": "Enum MessageType | websockets-sansio",
    "summary": "Enum MessageType Namespace WebSockets.Core Assembly WebSockets.Core.dll The types of messages. public enum MessageType Fields Binary = 1 Close = 4 Ping = 2 Pong = 3 Text = 0"
  },
  "api/WebSockets.Core.Messages.BinaryMessage.html": {
    "href": "api/WebSockets.Core.Messages.BinaryMessage.html",
    "title": "Class BinaryMessage | websockets-sansio",
    "summary": "Class BinaryMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll A WebSocket message with a payload of binary data. public class BinaryMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage BinaryMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryMessage(byte[]) Construct a binary message. public BinaryMessage(byte[] data) Parameters data byte[] The message data."
  },
  "api/WebSockets.Core.Messages.CloseMessage.html": {
    "href": "api/WebSockets.Core.Messages.CloseMessage.html",
    "title": "Class CloseMessage | websockets-sansio",
    "summary": "Class CloseMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll A message indicating the connection should be closed. If this is an initiating message the other side will respond with a close with the same code and reason. public class CloseMessage : Message, IEquatable<Message>, IEquatable<CloseMessage> Inheritance object Message CloseMessage Implements IEquatable<Message> IEquatable<CloseMessage> Inherited Members Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CloseMessage(ushort?, string?) Construct a close message. If a reason is given a code must be specified. public CloseMessage(ushort? code, string? reason) Parameters code ushort? An optional code. reason string An optional reason. Properties Code A code indicating the reason for the close. public ushort? Code { get; } Property Value ushort? The code. Reason A reason for the close. public string? Reason { get; } Property Value string The reason. Methods Equals(CloseMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(CloseMessage? other) Parameters other CloseMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.Messages.DataMessage.html": {
    "href": "api/WebSockets.Core.Messages.DataMessage.html",
    "title": "Class DataMessage | websockets-sansio",
    "summary": "Class DataMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll The base class for all messages which hold raw data. public abstract class DataMessage : Message, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage Implements IEquatable<Message> IEquatable<DataMessage> Derived BinaryMessage PingMessage PongMessage Inherited Members Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataMessage(MessageType, byte[]) Construct a data message. public DataMessage(MessageType type, byte[] data) Parameters type MessageType The type of the message. data byte[] The message data. Properties Data The data associated with the message. public byte[] Data { get; } Property Value byte[] The message data. Methods Equals(DataMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(DataMessage? other) Parameters other DataMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.Messages.Message.html": {
    "href": "api/WebSockets.Core.Messages.Message.html",
    "title": "Class Message | websockets-sansio",
    "summary": "Class Message Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll The base class for all WebSocket messages. public abstract class Message : IEquatable<Message> Inheritance object Message Implements IEquatable<Message> Derived CloseMessage DataMessage TextMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Message(MessageType) Construct a message. protected Message(MessageType type) Parameters type MessageType The message type. Properties Type The message type. public MessageType Type { get; } Property Value MessageType The type of the message. Methods Equals(Message?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Message? other) Parameters other Message An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.Messages.MessageType.html": {
    "href": "api/WebSockets.Core.Messages.MessageType.html",
    "title": "Enum MessageType | websockets-sansio",
    "summary": "Enum MessageType Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll The types of messages. public enum MessageType Fields Binary = 1 Close = 4 Ping = 2 Pong = 3 Text = 0"
  },
  "api/WebSockets.Core.Messages.PingMessage.html": {
    "href": "api/WebSockets.Core.Messages.PingMessage.html",
    "title": "Class PingMessage | websockets-sansio",
    "summary": "Class PingMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll A ping message. public class PingMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage PingMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PingMessage(byte[]) Construct a ping message. public PingMessage(byte[] data) Parameters data byte[] The data that the pong message should return."
  },
  "api/WebSockets.Core.Messages.PongMessage.html": {
    "href": "api/WebSockets.Core.Messages.PongMessage.html",
    "title": "Class PongMessage | websockets-sansio",
    "summary": "Class PongMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll The message used to respond to a ping message. public class PongMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage PongMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PongMessage(byte[]) Construct a pong message. public PongMessage(byte[] data) Parameters data byte[] The data sent by the ping messages."
  },
  "api/WebSockets.Core.Messages.TextMessage.html": {
    "href": "api/WebSockets.Core.Messages.TextMessage.html",
    "title": "Class TextMessage | websockets-sansio",
    "summary": "Class TextMessage Namespace WebSockets.Core.Messages Assembly WebSockets.Core.dll A message with text data. public class TextMessage : Message, IEquatable<Message>, IEquatable<TextMessage> Inheritance object Message TextMessage Implements IEquatable<Message> IEquatable<TextMessage> Inherited Members Message.Type Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextMessage(string) Construct the text message. public TextMessage(string text) Parameters text string The message text. Properties Text The message text. public string Text { get; } Property Value string The text. Methods Equals(TextMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TextMessage? other) Parameters other TextMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.Messages.html": {
    "href": "api/WebSockets.Core.Messages.html",
    "title": "Namespace WebSockets.Core.Messages | websockets-sansio",
    "summary": "Namespace WebSockets.Core.Messages Classes BinaryMessage A WebSocket message with a payload of binary data. CloseMessage A message indicating the connection should be closed. If this is an initiating message the other side will respond with a close with the same code and reason. DataMessage The base class for all messages which hold raw data. Message The base class for all WebSocket messages. PingMessage A ping message. PongMessage The message used to respond to a ping message. TextMessage A message with text data. Enums MessageType The types of messages."
  },
  "api/WebSockets.Core.NonceGenerator.html": {
    "href": "api/WebSockets.Core.NonceGenerator.html",
    "title": "Class NonceGenerator | websockets-sansio",
    "summary": "Class NonceGenerator Namespace WebSockets.Core Assembly WebSockets.Core.dll A nonce generator. public class NonceGenerator : INonceGenerator Inheritance object NonceGenerator Implements INonceGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _random public static readonly Random _random Field Value Random Methods CreateClientKey() Creates a random key for use in a handshake. The key is a sixteen byte array of randomly generated bytes, converted to a base 64 encoded string. public string CreateClientKey() Returns string The generated key. CreateMask() Create a mask for a websocket message. A mask is a four byte array containing random data. The mask is not intended to ensure security, but to prevent network infrastructure misinterpreting data. public byte[] CreateMask() Returns byte[] The mask."
  },
  "api/WebSockets.Core.PingMessage.html": {
    "href": "api/WebSockets.Core.PingMessage.html",
    "title": "Class PingMessage | websockets-sansio",
    "summary": "Class PingMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll public class PingMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage PingMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PingMessage(byte[]) public PingMessage(byte[] data) Parameters data byte[]"
  },
  "api/WebSockets.Core.PongMessage.html": {
    "href": "api/WebSockets.Core.PongMessage.html",
    "title": "Class PongMessage | websockets-sansio",
    "summary": "Class PongMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll public class PongMessage : DataMessage, IEquatable<Message>, IEquatable<DataMessage> Inheritance object Message DataMessage PongMessage Implements IEquatable<Message> IEquatable<DataMessage> Inherited Members DataMessage.Data DataMessage.Equals(DataMessage) Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PongMessage(byte[]) public PongMessage(byte[] data) Parameters data byte[]"
  },
  "api/WebSockets.Core.ProtocolState.html": {
    "href": "api/WebSockets.Core.ProtocolState.html",
    "title": "Enum ProtocolState | websockets-sansio",
    "summary": "Enum ProtocolState Namespace WebSockets.Core Assembly WebSockets.Core.dll The state of the protocol. public enum ProtocolState Fields Closed = 2 Closing = 1 Connected = 0 Faulted = 3"
  },
  "api/WebSockets.Core.PublicExtensionMethods.html": {
    "href": "api/WebSockets.Core.PublicExtensionMethods.html",
    "title": "Class PublicExtensionMethods | websockets-sansio",
    "summary": "Class PublicExtensionMethods Namespace WebSockets.Core Assembly WebSockets.Core.dll public static class PublicExtensionMethods Inheritance object PublicExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SingleCommaValues(IDictionary<string, IList<string>>, string) public static string[]? SingleCommaValues(this IDictionary<string, IList<string>> headers, string key) Parameters headers IDictionary<string, IList<string>> key string Returns string[] SingleValue(IDictionary<string, IList<string>>, string) public static string? SingleValue(this IDictionary<string, IList<string>> headers, string key) Parameters headers IDictionary<string, IList<string>> key string Returns string"
  },
  "api/WebSockets.Core.Reserved.html": {
    "href": "api/WebSockets.Core.Reserved.html",
    "title": "Struct Reserved | websockets-sansio",
    "summary": "Struct Reserved Namespace WebSockets.Core Assembly WebSockets.Core.dll public struct Reserved : IEquatable<Reserved> Implements IEquatable<Reserved> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Reserved(bool, bool, bool) public Reserved(bool isRsv1, bool isRsv2, bool isRsv3) Parameters isRsv1 bool isRsv2 bool isRsv3 bool Properties AllFalse public static Reserved AllFalse { get; } Property Value Reserved IsRsv1 public readonly bool IsRsv1 { get; } Property Value bool IsRsv2 public readonly bool IsRsv2 { get; } Property Value bool IsRsv3 public readonly bool IsRsv3 { get; } Property Value bool Methods Equals(Reserved) Indicates whether the current object is equal to another object of the same type. public bool Equals(Reserved other) Parameters other Reserved An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.ServerHandshake.html": {
    "href": "api/WebSockets.Core.ServerHandshake.html",
    "title": "Class ServerHandshake | websockets-sansio",
    "summary": "Class ServerHandshake Namespace WebSockets.Core Assembly WebSockets.Core.dll The server side of the WebSocket handshake. public class ServerHandshake : Handshake Inheritance object Handshake ServerHandshake Inherited Members Handshake.State Handshake.SelectedSubProtocol Handshake.ReadData(byte[], ref long, long) Handshake.WriteData(byte[], long, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples using System; using System.IO; using System.Net; using System.Net.Sockets; using WebSockets.Core; using WebSockets.Core.Messages; namespace ServerExample { class Program { static void Main() { var listener = new TcpListener(IPAddress.Any, 8081); listener.Start(); var tcpClient = listener.AcceptTcpClient(); var stream = client.GetStream(); var handshake = new ServerHandshake(subProtocols); // Read the client request. WebRequest? webRequest = null; var buffer = new byte[1024]; while (webRequest is null) { var bytesRead = stream.Read(buffer); if (bytesRead == 0) throw new EndOfStreamException(); handshake.WriteData(buffer, 0, bytesRead); webRequest = handshake.ReadRequest(); } // Send the response. var webResponse = handshake.CreateWebResponse(webRequest); handshake.WriteResponse(webResponse); bool isDone = false; while (!isDone) { var bytesRead = 0L; _handshake.ReadData(buffer, ref bytesRead, buffer.LongLength); if (bytesRead == 0) isDone = true; else { _stream.Write(buffer, 0, (int)bytesRead); Console.WriteLine(\"Sent client data\"); } } } } } Constructors ServerHandshake(string[]) Construct a server handshake object. public ServerHandshake(string[] subProtocols) Parameters subProtocols string[] The supported sub-protocols. Methods CreateWebResponse(WebRequest) Create the WebSocket response using the web request. If the response is valid an accept/upgrade response is generated. An invalid response will generate a 400 response containing the reason for the rejection. An application may inspect the request and create it's own bad response, for example if the path is not valid. public WebResponse CreateWebResponse(WebRequest webRequest) Parameters webRequest WebRequest The request from the client. Returns WebResponse The response to be sent to the client. ReadRequest() Read a WebRequest from the protocol. The request will be available when all of the request bytes have been received. public WebRequest? ReadRequest() Returns WebRequest A WebRequest if the complete message has been received; otherwise null. WriteResponse(WebResponse) Write a web response to the handshake buffer. public void WriteResponse(WebResponse webResponse) Parameters webResponse WebResponse The response to send to the client."
  },
  "api/WebSockets.Core.Test.TestArrayBuffer.html": {
    "href": "api/WebSockets.Core.Test.TestArrayBuffer.html",
    "title": "Class TestArrayBuffer | websockets-sansio",
    "summary": "Class TestArrayBuffer Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestArrayBuffer Inheritance object TestArrayBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestCopyInto() [TestMethod] public void TestCopyInto() TestToArray() [TestMethod] public void TestToArray()"
  },
  "api/WebSockets.Core.Test.TestFragmentBuffer.html": {
    "href": "api/WebSockets.Core.Test.TestFragmentBuffer.html",
    "title": "Class TestFragmentBuffer | websockets-sansio",
    "summary": "Class TestFragmentBuffer Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestFragmentBuffer Inheritance object TestFragmentBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestEndsWith() [TestMethod] public void TestEndsWith() TestIndex() [TestMethod] public void TestIndex() TestIndexOf() [TestMethod] public void TestIndexOf() TestReadMoreThanWritten() [TestMethod] public void TestReadMoreThanWritten() TestReadWhenEmpty() [TestMethod] public void TestReadWhenEmpty() TestToArray() [TestMethod] public void TestToArray() TestWriteManyReadOnce() [TestMethod] public void TestWriteManyReadOnce() TestWriteOnceReadMany() [TestMethod] public void TestWriteOnceReadMany() TestWriteReadWriteRead() [TestMethod] public void TestWriteReadWriteRead()"
  },
  "api/WebSockets.Core.Test.TestFrames.html": {
    "href": "api/WebSockets.Core.Test.TestFrames.html",
    "title": "Class TestFrames | websockets-sansio",
    "summary": "Class TestFrames Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestFrames Inheritance object TestFrames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestBinaryMasked() [TestMethod] public void TestBinaryMasked() TestBinaryUnmasked() [TestMethod] public void TestBinaryUnmasked() TestClose() [TestMethod] public void TestClose() TestLongPayload() public void TestLongPayload() TestNonAsciiTextMasked() [TestMethod] public void TestNonAsciiTextMasked() TestNonAsciiTextUnmasked() [TestMethod] public void TestNonAsciiTextUnmasked() TestPing() [TestMethod] public void TestPing() TestPong() [TestMethod] public void TestPong() TestTextMasked() [TestMethod] public void TestTextMasked() TestTextUnmasked() [TestMethod] public void TestTextUnmasked() TestVeryLongPayload() public void TestVeryLongPayload()"
  },
  "api/WebSockets.Core.Test.TestHandshake.html": {
    "href": "api/WebSockets.Core.Test.TestHandshake.html",
    "title": "Class TestHandshake | websockets-sansio",
    "summary": "Class TestHandshake Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestHandshake Inheritance object TestHandshake Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestOpenHandshake() [TestMethod] public void TestOpenHandshake() TestOpenHandshakeReject() [TestMethod] public void TestOpenHandshakeReject()"
  },
  "api/WebSockets.Core.Test.TestMessages.html": {
    "href": "api/WebSockets.Core.Test.TestMessages.html",
    "title": "Class TestMessages | websockets-sansio",
    "summary": "Class TestMessages Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestMessages Inheritance object TestMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestBinaryClient() [TestMethod] public void TestBinaryClient() TestBinaryServer() [TestMethod] public void TestBinaryServer() TestClose() [TestMethod] public void TestClose() TestLongPayload() public void TestLongPayload() TestNonAsciiTextClient() [TestMethod] public void TestNonAsciiTextClient() TestNonAsciiTextServer() [TestMethod] public void TestNonAsciiTextServer() TestPing() [TestMethod] public void TestPing() TestPong() [TestMethod] public void TestPong() TestTextClient() [TestMethod] public void TestTextClient() TestTextServer() [TestMethod] public void TestTextServer() TestVeryLongPayload() public void TestVeryLongPayload()"
  },
  "api/WebSockets.Core.Test.TestWebRequest.html": {
    "href": "api/WebSockets.Core.Test.TestWebRequest.html",
    "title": "Class TestWebRequest | websockets-sansio",
    "summary": "Class TestWebRequest Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestWebRequest Inheritance object TestWebRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestParse() [TestMethod] public void TestParse()"
  },
  "api/WebSockets.Core.Test.TestWebResponse.html": {
    "href": "api/WebSockets.Core.Test.TestWebResponse.html",
    "title": "Class TestWebResponse | websockets-sansio",
    "summary": "Class TestWebResponse Namespace WebSockets.Core.Test Assembly WebSockets.Core.Test.dll [TestClass] public sealed class TestWebResponse Inheritance object TestWebResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestParseResponseNoBody() [TestMethod] public void TestParseResponseNoBody() TestParseResponseWithBody() [TestMethod] public void TestParseResponseWithBody() TestRoundTrip() [TestMethod] public void TestRoundTrip() TestRoundTripWithBody() [TestMethod] public void TestRoundTripWithBody()"
  },
  "api/WebSockets.Core.Test.html": {
    "href": "api/WebSockets.Core.Test.html",
    "title": "Namespace WebSockets.Core.Test | websockets-sansio",
    "summary": "Namespace WebSockets.Core.Test Classes TestArrayBuffer TestFragmentBuffer TestFrames TestHandshake TestMessages TestWebRequest TestWebResponse"
  },
  "api/WebSockets.Core.TextMessage.html": {
    "href": "api/WebSockets.Core.TextMessage.html",
    "title": "Class TextMessage | websockets-sansio",
    "summary": "Class TextMessage Namespace WebSockets.Core Assembly WebSockets.Core.dll A message with text data. public class TextMessage : Message, IEquatable<Message>, IEquatable<TextMessage> Inheritance object Message TextMessage Implements IEquatable<Message> IEquatable<TextMessage> Inherited Members Message.Type Message.Serialize(bool, Reserved?, long, INonceGenerator) Message.Deserialize(byte[]) Message.Equals(Message) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextMessage(string) public TextMessage(string text) Parameters text string Properties Text public string Text { get; } Property Value string Methods Equals(TextMessage?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TextMessage? other) Parameters other TextMessage An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/WebSockets.Core.WebRequest.html": {
    "href": "api/WebSockets.Core.WebRequest.html",
    "title": "Class WebRequest | websockets-sansio",
    "summary": "Class WebRequest Namespace WebSockets.Core Assembly WebSockets.Core.dll A class modelling the required values of a WebSocket HTTP request. public class WebRequest Inheritance object WebRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebRequest(string, string, string, IDictionary<string, IList<string>>, byte[]?) Construct a web request. public WebRequest(string verb, string path, string version, IDictionary<string, IList<string>> headers, byte[]? body) Parameters verb string The verb (GET, POST, etc). path string The server path. version string The HTTP version. headers IDictionary<string, IList<string>> The headers. body byte[] An optional body. Properties Body public byte[]? Body { get; } Property Value byte[] Headers The HTTP Headers. Note: header keys are case insensitive. public IDictionary<string, IList<string>> Headers { get; } Property Value IDictionary<string, IList<string>> The headers. Path The server path. public string Path { get; } Property Value string The path for the server. Verb The HTTP verb. public string Verb { get; } Property Value string The verb. Version The HTTP version. public string Version { get; } Property Value string The version. Methods CreateUpgradeRequest(string, string, string, string, string[]?) public static WebRequest CreateUpgradeRequest(string path, string host, string origin, string key, string[]? subProtocols) Parameters path string host string origin string key string subProtocols string[] Returns WebRequest Parse(byte[]) public static WebRequest Parse(byte[] data) Parameters data byte[] Returns WebRequest ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/WebSockets.Core.WebResponse.html": {
    "href": "api/WebSockets.Core.WebResponse.html",
    "title": "Class WebResponse | websockets-sansio",
    "summary": "Class WebResponse Namespace WebSockets.Core Assembly WebSockets.Core.dll public class WebResponse Inheritance object WebResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebResponse(string, int, string, IDictionary<string, IList<string>>, byte[]?) public WebResponse(string version, int code, string reason, IDictionary<string, IList<string>> headers, byte[]? body) Parameters version string code int reason string headers IDictionary<string, IList<string>> body byte[] Properties Body public byte[]? Body { get; } Property Value byte[] Code public int Code { get; } Property Value int Headers public IDictionary<string, IList<string>> Headers { get; } Property Value IDictionary<string, IList<string>> Reason public string Reason { get; } Property Value string Version public string Version { get; } Property Value string Methods CreateAcceptResponse(string, string?) public static WebResponse CreateAcceptResponse(string responseKey, string? subProtocol) Parameters responseKey string subProtocol string Returns WebResponse CreateErrorResponse(string, DateTime) public static WebResponse CreateErrorResponse(string reason, DateTime date) Parameters reason string date DateTime Returns WebResponse Parse(byte[]) public static WebResponse Parse(byte[] data) Parameters data byte[] Returns WebResponse ToBytes() public byte[] ToBytes() Returns byte[]"
  },
  "api/WebSockets.Core.html": {
    "href": "api/WebSockets.Core.html",
    "title": "Namespace WebSockets.Core | websockets-sansio",
    "summary": "Namespace WebSockets.Core Classes ClientHandshake The client side of the WebSocket handshake. Handshake The base protocol class providing functionality shared by both clients and servers. MessageProtocol The base protocol class providing functionality shared by both clients and servers. ServerHandshake The server side of the WebSocket handshake. WebRequest A class modelling the required values of a WebSocket HTTP request. WebResponse Enums HandshakeState The state of the handshake. ProtocolState The state of the protocol."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | websockets-sansio",
    "summary": "Getting Started"
  },
  "docs/hello.html": {
    "href": "docs/hello.html",
    "title": "| websockets-sansio",
    "summary": "This is a test"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | websockets-sansio",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | websockets-sansio",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}